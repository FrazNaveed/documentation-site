"use client";

import React, { useEffect, useState } from "react";
import * as Accordion from "@radix-ui/react-accordion";
import * as ScrollArea from "@radix-ui/react-scroll-area";
import Link from "next/link";
import { ChevronRight } from "lucide-react";
import { useRouter } from "next/navigation";
import styles from "./index.module.scss";

interface SidebarItem {
  type: string;
  label?: string;
  collapsed?: boolean;
  link?: {
    type: string;
    id?: string;
    slug?: string;
    description?: string;
  };
  items?: SidebarItem[];
}

const sidebars = {
  networkSidebar: [
    {
      type: "doc" as "doc",
      label: "Introduction",
      link: { type: "doc", id: "intro" },
    },
    {
      type: "category" as "category",
      label: "Network",
      collapsed: true,
      link: { type: "doc", id: "fassets/overview" },
      items: [
        {
          type: "doc" as "doc",
          label: "Getting Started",
          link: { type: "doc", id: "intro" },
        },
        {
          type: "category" as "category",
          label: "Network Guides",
          collapsed: true,
          link: {
            slug: "/category/network/guides",
            type: "generated-index" as "generated-index",
            description:
              "Learn how to interact with Flare onchain and offchain.",
          },
          items: [
            {
              type: "autogenerated" as "autogenerated",
              dirName: "network/guides",
            },
          ],
        },
        {
          type: "category" as "category",
          label: "Network Reference",
          collapsed: true,
          link: { type: "doc", id: "network/solidity-reference" },
          items: [
            {
              type: "autogenerated" as "autogenerated",
              dirName: "network/solidity-reference",
            },
          ],
        },
        {
          type: "category" as "category",
          label: "Flare Systems Protocol",
          collapsed: true,
          link: { type: "doc", id: "network/fsp" },
          items: [
            {
              type: "doc" as "doc",
              label: "Protocol Components",
              link: { type: "doc", id: "network/fsp/protocol-components" },
            },
            {
              type: "doc" as "doc",
              label: "System Protocols",
              link: { type: "doc", id: "network/fsp/system-protocols" },
            },
            {
              type: "doc" as "doc",
              label: "Offchain Services",
              link: { type: "doc", id: "network/fsp/offchain-services" },
            },
            {
              type: "doc" as "doc",
              label: "Rewarding",
              link: { type: "doc", id: "network/fsp/rewarding" },
            },
            {
              type: "category" as "category",
              label: "FSP Reference",
              collapsed: true,
              link: { type: "doc", id: "network/fsp/solidity-reference" },
              items: [
                {
                  type: "autogenerated" as "autogenerated",
                  dirName: "network/fsp/solidity-reference",
                },
              ],
            },
          ],
        },
      ],
    },
  ],
};

const DocsNavigation: React.FC = () => {
  const router = useRouter();
  const [openItems, setOpenItems] = useState<string[]>([]);

  // Load open items from localStorage
  useEffect(() => {
    const storedOpenItems = localStorage.getItem("openAccordionItems");
    if (storedOpenItems) {
      setOpenItems(JSON.parse(storedOpenItems));
    }
  }, []);

  // Save open items to localStorage whenever they change
  const handleAccordionChange = (newOpenItems: string[]) => {
    setOpenItems(newOpenItems);
    localStorage.setItem("openAccordionItems", JSON.stringify(newOpenItems));
  };

  const renderSidebarItems = (items: SidebarItem[], parentIndex = "") =>
    items.map((item, index) => {
      const value = `${parentIndex}${index}`;

      return (
        <Accordion.Item
          key={value}
          value={value}
          className={styles.accordionItem}
        >
          {item.items && item.items.length > 0 ? (
            <>
              <Accordion.Trigger
                className={styles.accordionTrigger}
                onClick={() => {
                  if (item.link?.type === "doc") {
                    router.push(`/docs/${item.link.id}`);
                  }
                }}
              >
                {item.label}
                <ChevronRight className={styles.chevron} />
              </Accordion.Trigger>
              <Accordion.Content className={styles.accordionContent}>
                <Accordion.Root
                  type="multiple"
                  value={openItems}
                  onValueChange={handleAccordionChange}
                >
                  {renderSidebarItems(item.items, value + "-")}
                </Accordion.Root>
              </Accordion.Content>
            </>
          ) : (
            item.link &&
            item.link.type === "doc" && (
              <Link href={`/docs/${item.link.id}`} className={styles.link}>
                {item.label}
              </Link>
            )
          )}
        </Accordion.Item>
      );
    });

  return (
    <aside className={styles.sidebar}>
      <ScrollArea.Root className={styles.scrollArea}>
        <ScrollArea.Viewport>
          <nav className={styles.nav}>
            <Accordion.Root
              type="multiple"
              value={openItems}
              onValueChange={handleAccordionChange}
            >
              {renderSidebarItems(sidebars.networkSidebar)}
            </Accordion.Root>
          </nav>
        </ScrollArea.Viewport>
        <ScrollArea.Scrollbar
          className={styles.scrollbar}
          orientation="vertical"
        >
          <ScrollArea.Thumb className={styles.thumb} />
        </ScrollArea.Scrollbar>
      </ScrollArea.Root>
    </aside>
  );
};

export default DocsNavigation;
