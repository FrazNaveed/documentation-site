@use "../../_styles/mixins" as *;
@use "../../_styles/typography" as *;
@use "../../_styles/colors" as *;
@use "../../_styles/transitions" as *;
@use "../../_styles/spacing" as *;
@use "@aleph/nought-sass-mixins/sass/utils";

.Wrap {
  @include containerGrid;
}

.PointsWrap {
  @include columns(3, 12);

  display: flex;
  flex-wrap: wrap;
  padding-bottom: to-rem($spacing-xxx-large);

  @include media-breakpoint-down(lg) {
    @include columns(3, 8);

    padding-bottom: to-rem($spacing-x-large);
  }

  @include media-breakpoint-down(md) {
    @include columns(1, -1);

    padding-bottom: to-rem($spacing-large);
  }
}

.Point {
  flex-basis: 50%;
  padding-bottom: to-rem($spacing-standard);
  border-bottom: 1px solid $gray-100;
  box-sizing: border-box;

  @include media-breakpoint-up(lg) {
    &:nth-child(n + 3) {
      padding-top: to-rem($spacing-large);
    }
  }

  @include media-breakpoint-down(lg) {
    flex-basis: 100%;
    margin-bottom: to-rem($spacing-large);
    padding-bottom: 0;
    border-bottom: none;

    &:last-child {
      margin-bottom: 0;
    }
  }

  &__borderRight {
    border-right: 1px solid $gray-100;
  }

  &__left {
    border-right: 1px solid $gray-100;

    @include media-breakpoint-down(lg) {
      border-right: none;
    }
  }

  &__noBorderRight {
    border-right: none;
  }

  &__noBorderBottom {
    border-bottom: none;
  }

  &__right {
    padding-left: to-rem($spacing-medium + 4px);
    // border-left: 1px solid $gray-100;

    @include media-breakpoint-down(lg) {
      padding-left: 0;
      // border-left: none;
    }
  }

  &HeaderWrap {
    display: flex;
    margin-bottom: to-rem($spacing-small);

    @include media-breakpoint-down(lg) {
      margin-bottom: to-rem($spacing-x-small);
    }
  }

  &Header {
    @include headerDesktopH7;

    @include media-breakpoint-down(lg) {
      @include headerMobileH7;
    }
  }

  &Image {
    margin-right: to-rem($spacing-standard);
  }

  p {
    // replace after lexical component is in
    margin-bottom: 0;
  }
}
